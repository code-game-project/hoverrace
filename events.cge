name hoverrace
version 0.3

// The `start` event is sent when the race begins.
// The game begins once at least 2 players have joined and all players have sent the `ready` event.
event start {}

// The `in_progress` event is sent to sockets which connect to the game while it's running.
event in_progress {}

// The `countdown` counts down from 5. When the value reaches 0 a `start` event will be sent instead of the `countdown` event.
event countdown {
	// The current value of the countdown (5-1).
	value: int
}

// The `checkpoints` event contains all of the remaining checkpoints.
event checkpoints {
	// The positions of all the remaining checkpoints.
	checkpoints: list<vec>,
	// The position of the finish line.
	finish_line: vec
}

// Send the `ready` event to the server when you think the game should begin.
event ready {}

// The `ready_players` event contains a list of all players which are ready.
event ready_players {
	// A list of all ready players.
	players: list<string>,
	// True if all players in the game are ready.
	everyone: bool
}

// The `throttle` event allows you to change your throttle level and direction.
// **NOTE:** These values are targets. The hovercraft needs some time to reach the desired values.
event throttle {
	// Throttle level between -1 - 1.
	level: float,
	// The angle in degrees the hovercraft should be facing (up = 0°).
	angle: float
}

// The `hovercraft` event tells all clients where all the hovercrafts are and how they are moving.
event hovercrafts {
	// All hovercrafts mapped to their respective player IDs.
	hovercrafts: map<hovercraft>,
	// The time in UNIX milliseconds when this event occured.
	time: int64
}

// The `finished_players` event contains a list of players that have finished the race.
event finished_players {
	// A list of players that have finished the race sorted by their placement.
	players: list<finished_player>
}

// A hovercraft is a circle with a diameter of 1 unit.
type hovercraft {
	// The position of the center of the hovercraft.
	pos: vec,
	// The current velocity of the hovercraft.
	velocity: vec,
	// The current throttle of the hovercraft.
	throttle: float64,
	// The angle in degrees the hovercraft is facing (up = 0°).
	angle: float,
	// The amount of reached checkpoints.
	checkpoints: int
}

// `finished_player` represents an entry in the final ranking.
type finished_player {
	// The ID of the player.
	id: string,
	// The place, the player has reached.
	place: int,
	// The amount of time in milliseconds the player needed to finish the race.
	duration: int64
}

// One unit equals the width of the hovercrafts and checkpoints.
type vec {
	// left to right
	x: float,
	// bottom to top
	y: float
}
